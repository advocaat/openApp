#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('openApp:server');
var http = require('http');
var graph = require('../control/facebook/graph');
var urls = require('../model/urls');
var uploads = require('../model/uploads');
var scheduler = require('../scheduler');
var serviceHandler = require('../serviceHandler');
var uploadSC = require('../control/soundcloud/uploadSC');
var removeFiles = require('../model/uploads/removeFiles');
var fs = require('fs');
var twitter = require('../control/twitter');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


serviceHandler.getTrackDataFromSoundcloud();
scheduler.scheduleDaily(6, serviceHandler.getTrackDataFromSoundcloud);
/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io')(server);
io.on('connection', function(socket){

setInterval(function(){
  if(uploads.added != null){
      console.log("in interval "+ uploads.added.toString())
      socket.emit("update",{ id:  uploads.added.toString(), isAudio: uploads.audio});
      console.log("emitted "+ uploads.added + uploads.audio.toString());
      setTimeout(function(){
        uploads.added = null;
        uploads.setAudio(false);
      }, 1000);
   }
}, 1000);
  
  
  socket.on('facebook', function(data){
    console.log(data.schedule);
    scheduler.schedulePost(data.schedule ,graph.postPage, data.message);
  });

  socket.on('twitter', function (data) {
    console.log("emitter twitter" + data.message);
    scheduler.schedulePost(data.schedule, twitter, data.message);
  });

  socket.on('soundcloud', function(data){

    scheduler.scheduleUploadSoundcloud(data.schedule, uploadSC.uploadMongo, data.title, data.fileId, data.playlist, data.description, data.genre);

  })
  



});
setInterval(function(){
  console.log("in remove file");
  console.log(removeFiles.testFile())
  if(removeFiles.testFile() != undefined){
  console.log("removing " +__dirname + "\\..\\"+ removeFiles.testFile());
      fs.unlink(__dirname + "\\..\\"+ removeFiles.testFile(), function(err, file){
        if(err){
          console.log("problem removing file "+ err)
        }else{
          console.log("removed file " + file);
          removeFiles.removeFile();
        }
      })
  }
}, 10000)


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
